(:open
define:symbol
(:open
length:symbol
L:symbol
):close
(:open
cond:symbol
(:open
(:open
null?:symbol
L:symbol
):close
0:integer
):close
(:open
else:symbol
(:open
+:symbol
(:open
length:symbol
(:open
cdr:symbol
L:symbol
):close
):close
1:integer
):close
):close
):close
):close
(:open
>:symbol
2:integer
0:integer
):close
(:open
!=:symbol
2.000000:double
33:integer
):close
(:open
let*:symbol
2:integer
3:integer
):close
(:open
+:symbol
1:integer
2.000000:double
2:integer
):close
(:open
define:symbol
nth:symbol
(:open
lambda:symbol
(:open
llst:symbol
n:symbol
):close
(:open
cond:symbol
(:open
(:open
null?:symbol
llst:symbol
):close
#f:boolean
):close
(:open
(:open
=:symbol
1:integer
n:symbol
):close
(:open
list:symbol
(:open
car:symbol
llst:symbol
):close
):close
):close
(:open
(:open
nth:symbol
(:open
(:open
cdr:symbol
llst:symbol
):close
):close
(:open
-:symbol
n:symbol
1:integer
):close
):close
):close
(:open
else:symbol
#f:boolean
):close
):close
):close
):close
(:open
check-equal?:symbol
(:open
nth:symbol
(:open
quote:symbol
(:open
):close
):close
10:integer
):close
#f:boolean
):close
(:open
check-equal?:symbol
(:open
nth:symbol
(:open
lazy-range:symbol
1:integer
6:integer
):close
100:integer
):close
#f:boolean
):close
